{"ast":null,"code":"/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport * as React from 'react';\nimport FormattedMessage from './message';\nimport { Context } from './injectIntl';\nimport { invariantIntlContext } from '../utils';\n\nclass FormattedHTMLMessage extends FormattedMessage {\n  render() {\n    return React.createElement(Context.Consumer, null, intl => {\n      if (!this.props.defaultMessage) {\n        invariantIntlContext(intl);\n      }\n\n      const formatHTMLMessage = intl.formatHTMLMessage,\n            textComponent = intl.textComponent;\n      const _this$props = this.props,\n            id = _this$props.id,\n            description = _this$props.description,\n            defaultMessage = _this$props.defaultMessage,\n            rawValues = _this$props.values,\n            children = _this$props.children;\n      let Component = this.props.tagName; // This is bc of TS3.3 doesn't recognize `defaultProps`\n\n      if (!Component) {\n        Component = textComponent || 'span';\n      }\n\n      let descriptor = {\n        id,\n        description,\n        defaultMessage\n      };\n      let formattedHTMLMessage = formatHTMLMessage(descriptor, rawValues);\n\n      if (typeof children === 'function') {\n        return children(formattedHTMLMessage);\n      } // Since the message presumably has HTML in it, we need to set\n      // `innerHTML` in order for it to be rendered and not escaped by React.\n      // To be safe, all string prop values were escaped when formatting the\n      // message. It is assumed that the message is not UGC, and came from the\n      // developer making it more like a template.\n      //\n      // Note: There's a perf impact of using this component since there's no\n      // way for React to do its virtual DOM diffing.\n\n\n      const html = {\n        __html: formattedHTMLMessage\n      };\n      return React.createElement(Component, {\n        dangerouslySetInnerHTML: html\n      });\n    });\n  }\n\n}\n\nFormattedHTMLMessage.displayName = 'FormattedHTMLMessage';\nFormattedHTMLMessage.defaultProps = Object.assign({}, FormattedMessage.defaultProps, {\n  tagName: 'span'\n});\nexport default FormattedHTMLMessage;","map":null,"metadata":{},"sourceType":"module"}