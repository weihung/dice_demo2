{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { callAll } from '../utils';\n\nvar Tracks =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Tracks, _Component);\n\n  function Tracks() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Tracks);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Tracks)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"getTrackProps\", function () {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _this$props = _this.props,\n          emitMouse = _this$props.emitMouse,\n          emitTouch = _this$props.emitTouch;\n      return _objectSpread({}, props, {\n        onMouseDown: callAll(props.onMouseDown, emitMouse),\n        onTouchStart: callAll(props.onTouchStart, emitTouch)\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(Tracks, [{\n    key: \"render\",\n    value: function render() {\n      var getTrackProps = this.getTrackProps,\n          _this$props2 = this.props,\n          children = _this$props2.children,\n          left = _this$props2.left,\n          right = _this$props2.right,\n          scale = _this$props2.scale,\n          handles = _this$props2.handles,\n          getEventData = _this$props2.getEventData,\n          activeHandleID = _this$props2.activeHandleID;\n      var domain = scale.getDomain();\n      var tracks = [];\n\n      for (var i = 0; i < handles.length + 1; i++) {\n        var source = handles[i - 1];\n        var target = handles[i];\n\n        if (i === 0 && left === true) {\n          source = {\n            id: '$',\n            value: domain[0],\n            percent: 0\n          };\n        } else if (i === handles.length && right === true) {\n          target = {\n            id: '$',\n            value: domain[1],\n            percent: 100\n          };\n        }\n\n        if (source && target) {\n          tracks.push({\n            id: \"\".concat(source.id, \"-\").concat(target.id),\n            source: source,\n            target: target\n          });\n        }\n      }\n\n      var renderedChildren = children({\n        getEventData: getEventData,\n        activeHandleID: activeHandleID,\n        tracks: tracks,\n        getTrackProps: getTrackProps\n      });\n      return renderedChildren && React.Children.only(renderedChildren);\n    }\n  }]);\n\n  return Tracks;\n}(Component);\n\nTracks.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * Boolean value to control whether the left most track is included in the tracks array.\n   */\n  left: PropTypes.bool,\n\n  /**\n   * Boolean value to control whether the right most track is included in the tracks array.\n   */\n  right: PropTypes.bool,\n\n  /** @ignore */\n  getEventData: PropTypes.func,\n\n  /** @ignore */\n  activeHandleID: PropTypes.string,\n\n  /** @ignore */\n  scale: PropTypes.object,\n\n  /** @ignore */\n  handles: PropTypes.array,\n\n  /** @ignore */\n  emitMouse: PropTypes.func,\n\n  /** @ignore */\n  emitTouch: PropTypes.func,\n\n  /**\n   * A function to render the tracks. The function receives an object with an array of tracks. Note: `getEventData` can be called with an event and get the value and percent at that location (used for tooltips etc). `activeHandleID` will be a string or null.  Function signature:  `({ getEventData, activeHandleID, tracks, getTrackProps }): element`\n   */\n  children: PropTypes.func.isRequired\n} : {};\nTracks.defaultProps = {\n  left: true,\n  right: true\n};\nexport default Tracks;","map":null,"metadata":{},"sourceType":"module"}