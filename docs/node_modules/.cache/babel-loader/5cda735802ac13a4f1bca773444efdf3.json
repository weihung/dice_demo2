{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React, { PureComponent, Fragment } from 'react';\nimport warning from 'warning';\nimport PropTypes from 'prop-types';\nimport Rail from '../Rail';\nimport Ticks from '../Ticks';\nimport Tracks from '../Tracks';\nimport Handles from '../Handles';\nimport { mode1, mode2, mode3 } from './modes';\nimport { isNotValidTouch, getTouchPosition, getUpdatedHandles, getSliderDomain, getHandles, prfx } from './utils';\nimport LinearScale from './LinearScale';\nimport DiscreteScale from './DiscreteScale';\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';\n\nvar noop = function noop() {};\n\nvar compare = function compare(b) {\n  return function (m, d, i) {\n    return m && b[i] === d;\n  };\n};\n\nvar equal = function equal(a, b) {\n  return a === b || a.length === b.length && a.reduce(compare(b), true);\n};\n\nvar getNextValue = function getNextValue(curr, step, domain, reversed) {\n  var newVal = reversed ? curr - step : curr + step;\n  return reversed ? Math.max(domain[0], newVal) : Math.min(domain[1], newVal);\n};\n\nvar getPrevValue = function getPrevValue(curr, step, domain, reversed) {\n  var newVal = reversed ? curr + step : curr - step;\n  return reversed ? Math.min(domain[1], newVal) : Math.max(domain[0], newVal);\n};\n\nvar Slider =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Slider, _PureComponent);\n\n  function Slider() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Slider);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Slider)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      step: null,\n      values: null,\n      domain: null,\n      handles: [],\n      reversed: null,\n      activeHandleID: null,\n      valueToPerc: null,\n      valueToStep: null,\n      pixelToStep: null\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"slider\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"onKeyDown\", function (e, handleID) {\n      var validUpKeys = ['ArrowRight', 'ArrowUp'];\n      var validDownKeys = ['ArrowDown', 'ArrowLeft'];\n\n      var _assertThisInitialize = _assertThisInitialized(_this),\n          handles = _assertThisInitialize.state.handles,\n          _assertThisInitialize2 = _assertThisInitialize.props,\n          step = _assertThisInitialize2.step,\n          reversed = _assertThisInitialize2.reversed,\n          vertical = _assertThisInitialize2.vertical,\n          domain = _assertThisInitialize2.domain;\n\n      var key = e.key || e.keyCode;\n\n      if (!validUpKeys.concat(validDownKeys).includes(key)) {\n        return;\n      }\n\n      if (vertical) {\n        var _ref = [validDownKeys, validUpKeys];\n        validUpKeys = _ref[0];\n        validDownKeys = _ref[1];\n      }\n\n      e.stopPropagation && e.stopPropagation();\n      e.preventDefault && e.preventDefault();\n      var found = handles.find(function (value) {\n        return value.key === handleID;\n      });\n\n      if (!found) {\n        return;\n      }\n\n      var currVal = found.val;\n      var newVal = currVal;\n\n      if (validUpKeys.includes(key)) {\n        newVal = getNextValue(currVal, step, domain, reversed);\n      } else if (validDownKeys.includes(key)) {\n        newVal = getPrevValue(currVal, step, domain, reversed);\n      }\n\n      var nextHandles = handles.map(function (v) {\n        return v.key === handleID ? {\n          key: v.key,\n          val: newVal\n        } : v;\n      });\n\n      _this.submitUpdate(nextHandles, true);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onMouseDown\", function (e, handleID) {\n      _this.onStart(e, handleID, false);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTouchStart\", function (e, handleID) {\n      if (isNotValidTouch(e)) {\n        return;\n      }\n\n      _this.onStart(e, handleID, true);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getEventData\", function (e, isTouch) {\n      var _assertThisInitialize3 = _assertThisInitialized(_this),\n          _assertThisInitialize4 = _assertThisInitialize3.state,\n          pixelToStep = _assertThisInitialize4.pixelToStep,\n          valueToPerc = _assertThisInitialize4.valueToPerc,\n          vertical = _assertThisInitialize3.props.vertical; // double check the dimensions of the slider\n\n\n      pixelToStep.setDomain(getSliderDomain(_this.slider.current, vertical));\n      var value;\n\n      if (isTouch) {\n        value = pixelToStep.getValue(getTouchPosition(vertical, e));\n      } else {\n        value = pixelToStep.getValue(vertical ? e.clientY : e.pageX);\n      }\n\n      return {\n        value: value,\n        percent: valueToPerc.getValue(value)\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onMouseMove\", function (e) {\n      var _assertThisInitialize5 = _assertThisInitialized(_this),\n          _assertThisInitialize6 = _assertThisInitialize5.state,\n          curr = _assertThisInitialize6.handles,\n          pixelToStep = _assertThisInitialize6.pixelToStep,\n          activeHandleID = _assertThisInitialize6.activeHandleID,\n          _assertThisInitialize7 = _assertThisInitialize5.props,\n          vertical = _assertThisInitialize7.vertical,\n          reversed = _assertThisInitialize7.reversed; // double check the dimensions of the slider\n\n\n      pixelToStep.setDomain(getSliderDomain(_this.slider.current, vertical)); // find the closest value (aka step) to the event location\n\n      var updateValue = pixelToStep.getValue(vertical ? e.clientY : e.pageX); // generate a \"candidate\" set of values - a suggestion of what to do\n\n      var nextHandles = getUpdatedHandles(curr, activeHandleID, updateValue, reversed); // submit the candidate values\n\n      _this.submitUpdate(nextHandles);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTouchMove\", function (e) {\n      var _assertThisInitialize8 = _assertThisInitialized(_this),\n          _assertThisInitialize9 = _assertThisInitialize8.state,\n          curr = _assertThisInitialize9.handles,\n          pixelToStep = _assertThisInitialize9.pixelToStep,\n          activeHandleID = _assertThisInitialize9.activeHandleID,\n          _assertThisInitialize10 = _assertThisInitialize8.props,\n          vertical = _assertThisInitialize10.vertical,\n          reversed = _assertThisInitialize10.reversed;\n\n      if (isNotValidTouch(e)) {\n        return;\n      } // double check the dimensions of the slider\n\n\n      pixelToStep.setDomain(getSliderDomain(_this.slider.current, vertical)); // find the closest value (aka step) to the event location\n\n      var updateValue = pixelToStep.getValue(getTouchPosition(vertical, e)); // generate a \"candidate\" set of values - a suggestion of what to do\n\n      var nextHandles = getUpdatedHandles(curr, activeHandleID, updateValue, reversed); // submit the candidate values\n\n      _this.submitUpdate(nextHandles);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onMouseUp\", function () {\n      var _assertThisInitialize11 = _assertThisInitialized(_this),\n          _assertThisInitialize12 = _assertThisInitialize11.state,\n          handles = _assertThisInitialize12.handles,\n          activeHandleID = _assertThisInitialize12.activeHandleID,\n          _assertThisInitialize13 = _assertThisInitialize11.props,\n          onChange = _assertThisInitialize13.onChange,\n          onSlideEnd = _assertThisInitialize13.onSlideEnd;\n\n      onChange(handles.map(function (d) {\n        return d.val;\n      }));\n      onSlideEnd(handles.map(function (d) {\n        return d.val;\n      }), {\n        activeHandleID: activeHandleID\n      });\n\n      _this.setState({\n        activeHandleID: null\n      });\n\n      if (isBrowser) {\n        document.removeEventListener('mousemove', _this.onMouseMove);\n        document.removeEventListener('mouseup', _this.onMouseUp);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTouchEnd\", function () {\n      var _assertThisInitialize14 = _assertThisInitialized(_this),\n          _assertThisInitialize15 = _assertThisInitialize14.state,\n          handles = _assertThisInitialize15.handles,\n          activeHandleID = _assertThisInitialize15.activeHandleID,\n          _assertThisInitialize16 = _assertThisInitialize14.props,\n          onChange = _assertThisInitialize16.onChange,\n          onSlideEnd = _assertThisInitialize16.onSlideEnd;\n\n      onChange(handles.map(function (d) {\n        return d.val;\n      }));\n      onSlideEnd(handles.map(function (d) {\n        return d.val;\n      }), {\n        activeHandleID: activeHandleID\n      });\n\n      _this.setState({\n        activeHandleID: null\n      });\n\n      if (isBrowser) {\n        document.removeEventListener('touchmove', _this.onTouchMove);\n        document.removeEventListener('touchend', _this.onTouchEnd);\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(Slider, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var pixelToStep = this.state.pixelToStep;\n      var vertical = this.props.vertical;\n      pixelToStep.setDomain(getSliderDomain(this.slider.current, vertical));\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.removeListeners();\n    }\n  }, {\n    key: \"removeListeners\",\n    value: function removeListeners() {\n      if (isBrowser) {\n        document.removeEventListener('mousemove', this.onMouseMove);\n        document.removeEventListener('mouseup', this.onMouseUp);\n        document.removeEventListener('touchmove', this.onTouchMove);\n        document.removeEventListener('touchend', this.onTouchEnd);\n      }\n    }\n  }, {\n    key: \"onStart\",\n    value: function onStart(e, handleID, isTouch) {\n      var handles = this.state.handles,\n          onSlideStart = this.props.onSlideStart;\n\n      if (!isTouch) {\n        e.preventDefault && e.preventDefault();\n      }\n\n      e.stopPropagation && e.stopPropagation();\n      var found = handles.find(function (value) {\n        return value.key === handleID;\n      });\n\n      if (found) {\n        this.setState({\n          activeHandleID: handleID\n        });\n        onSlideStart(handles.map(function (d) {\n          return d.val;\n        }), {\n          activeHandleID: handleID\n        });\n        isTouch ? this.addTouchEvents() : this.addMouseEvents();\n      } else {\n        this.setState({\n          activeHandleID: null\n        });\n        this.handleRailAndTrackClicks(e, isTouch);\n      }\n    }\n  }, {\n    key: \"handleRailAndTrackClicks\",\n    value: function handleRailAndTrackClicks(e, isTouch) {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          curr = _this$state.handles,\n          pixelToStep = _this$state.pixelToStep,\n          _this$props = this.props,\n          vertical = _this$props.vertical,\n          reversed = _this$props.reversed;\n      var slider = this.slider; // double check the dimensions of the slider\n\n      pixelToStep.setDomain(getSliderDomain(slider.current, vertical)); // find the closest value (aka step) to the event location\n\n      var updateValue;\n\n      if (isTouch) {\n        updateValue = pixelToStep.getValue(getTouchPosition(vertical, e));\n      } else {\n        updateValue = pixelToStep.getValue(vertical ? e.clientY : e.pageX);\n      } // find the closest handle key\n\n\n      var updateKey = null;\n      var minDiff = Infinity;\n\n      for (var i = 0; i < curr.length; i++) {\n        var _curr$i = curr[i],\n            key = _curr$i.key,\n            val = _curr$i.val;\n        var diff = Math.abs(val - updateValue);\n\n        if (diff < minDiff) {\n          updateKey = key;\n          minDiff = diff;\n        }\n      } // generate a \"candidate\" set of values - a suggestion of what to do\n\n\n      var nextHandles = getUpdatedHandles(curr, updateKey, updateValue, reversed); // submit the candidate values\n\n      this.setState({\n        activeHandleID: updateKey\n      }, function () {\n        _this2.submitUpdate(nextHandles, true);\n\n        isTouch ? _this2.addTouchEvents() : _this2.addMouseEvents();\n      });\n    }\n  }, {\n    key: \"addMouseEvents\",\n    value: function addMouseEvents() {\n      if (isBrowser) {\n        document.addEventListener('mousemove', this.onMouseMove);\n        document.addEventListener('mouseup', this.onMouseUp);\n      }\n    }\n  }, {\n    key: \"addTouchEvents\",\n    value: function addTouchEvents() {\n      if (isBrowser) {\n        document.addEventListener('touchmove', this.onTouchMove);\n        document.addEventListener('touchend', this.onTouchEnd);\n      }\n    }\n  }, {\n    key: \"submitUpdate\",\n    value: function submitUpdate(next, callOnChange) {\n      var _this$props2 = this.props,\n          mode = _this$props2.mode,\n          step = _this$props2.step,\n          onUpdate = _this$props2.onUpdate,\n          onChange = _this$props2.onChange,\n          reversed = _this$props2.reversed;\n      var getValue = this.state.valueToStep.getValue;\n      this.setState(function (_ref2) {\n        var curr = _ref2.handles;\n        var handles; // given the current handles and a candidate set, decide what to do\n\n        if (typeof mode === 'function') {\n          handles = mode(curr, next, step, reversed, getValue);\n          warning(Array.isArray(handles), 'Custom mode function did not return an array.');\n        } else {\n          switch (mode) {\n            case 1:\n              handles = mode1(curr, next);\n              break;\n\n            case 2:\n              handles = mode2(curr, next);\n              break;\n\n            case 3:\n              handles = mode3(curr, next, step, reversed, getValue);\n              break;\n\n            default:\n              handles = next;\n              warning(false, \"\".concat(prfx, \" Invalid mode value.\"));\n          }\n        }\n\n        onUpdate(handles.map(function (d) {\n          return d.val;\n        }));\n\n        if (callOnChange) {\n          onChange(handles.map(function (d) {\n            return d.val;\n          }));\n        }\n\n        return {\n          handles: handles\n        };\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state2 = this.state,\n          handles = _this$state2.handles,\n          valueToPerc = _this$state2.valueToPerc,\n          activeHandleID = _this$state2.activeHandleID,\n          _this$props3 = this.props,\n          className = _this$props3.className,\n          rootStyle = _this$props3.rootStyle,\n          rootProps = _this$props3.rootProps,\n          Comp = _this$props3.component,\n          disabled = _this$props3.disabled,\n          flatten = _this$props3.flatten;\n      var mappedHandles = handles.map(function (_ref3) {\n        var key = _ref3.key,\n            val = _ref3.val;\n        return {\n          id: key,\n          value: val,\n          percent: valueToPerc.getValue(val)\n        };\n      });\n      var children = React.Children.map(this.props.children, function (child) {\n        if (child && (child.type.name === Rail.name || child.type.name === Ticks.name || child.type.name === Tracks.name || child.type.name === Handles.name)) {\n          return React.cloneElement(child, {\n            scale: valueToPerc,\n            handles: mappedHandles,\n            activeHandleID: activeHandleID,\n            getEventData: _this3.getEventData,\n            emitKeyboard: disabled ? noop : _this3.onKeyDown,\n            emitMouse: disabled ? noop : _this3.onMouseDown,\n            emitTouch: disabled ? noop : _this3.onTouchStart\n          });\n        }\n\n        return child;\n      });\n      return flatten ? React.createElement(Fragment, null, React.createElement(Comp, _extends({}, rootProps, {\n        style: rootStyle,\n        className: className,\n        ref: this.slider\n      })), children) : React.createElement(Comp, _extends({}, rootProps, {\n        style: rootStyle,\n        className: className,\n        ref: this.slider\n      }), children);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var step = nextProps.step,\n          values = nextProps.values,\n          domain = nextProps.domain,\n          reversed = nextProps.reversed,\n          onUpdate = nextProps.onUpdate,\n          onChange = nextProps.onChange,\n          warnOnChanges = nextProps.warnOnChanges;\n      var valueToPerc = prevState.valueToPerc;\n      var valueToStep = prevState.valueToStep;\n      var pixelToStep = prevState.pixelToStep;\n      var nextState = {};\n\n      if (!valueToPerc || !valueToStep || !pixelToStep) {\n        valueToPerc = new LinearScale();\n        valueToStep = new DiscreteScale();\n        pixelToStep = new DiscreteScale();\n        nextState.valueToPerc = valueToPerc;\n        nextState.valueToStep = valueToStep;\n        nextState.pixelToStep = pixelToStep;\n      }\n\n      if (prevState.step === null || prevState.domain === null || prevState.reversed === null || step !== prevState.step || domain[0] !== prevState.domain[0] || domain[1] !== prevState.domain[1] || reversed !== prevState.reversed) {\n        var _domain = _slicedToArray(domain, 2),\n            min = _domain[0],\n            max = _domain[1];\n\n        valueToStep.setStep(step).setRange([min, max]).setDomain([min, max]);\n\n        if (reversed === true) {\n          valueToPerc.setDomain([min, max]).setRange([100, 0]);\n          pixelToStep.setStep(step).setRange([max, min]);\n        } else {\n          valueToPerc.setDomain([min, max]).setRange([0, 100]);\n          pixelToStep.setStep(step).setRange([min, max]);\n        }\n\n        warning(max > min, \"\".concat(prfx, \" Max must be greater than min (even if reversed). Max is \").concat(max, \". Min is \").concat(min, \".\"));\n\n        var _getHandles = getHandles(values || prevState.values, reversed, valueToStep, warnOnChanges),\n            handles = _getHandles.handles,\n            changes = _getHandles.changes;\n\n        if (changes || values === undefined || values === prevState.values) {\n          onUpdate(handles.map(function (d) {\n            return d.val;\n          }));\n          onChange(handles.map(function (d) {\n            return d.val;\n          }));\n        }\n\n        nextState.step = step;\n        nextState.values = values;\n        nextState.domain = domain;\n        nextState.handles = handles;\n        nextState.reversed = reversed;\n      } else if (!equal(values, prevState.values)) {\n        var _getHandles2 = getHandles(values, reversed, valueToStep, warnOnChanges),\n            _handles = _getHandles2.handles,\n            _changes = _getHandles2.changes;\n\n        if (_changes) {\n          onUpdate(_handles.map(function (d) {\n            return d.val;\n          }));\n          onChange(_handles.map(function (d) {\n            return d.val;\n          }));\n        }\n\n        nextState.values = values;\n        nextState.handles = _handles;\n      }\n\n      if (Object.keys(nextState).length) {\n        return nextState;\n      }\n\n      return null;\n    }\n  }]);\n\n  return Slider;\n}(PureComponent);\n\nSlider.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * String component used for slider root. Defaults to 'div'.\n   */\n  component: PropTypes.string,\n\n  /**\n   * An object with any inline styles you want applied to the root element.\n   */\n  rootStyle: PropTypes.object,\n\n  /**\n   * An object with any props you want applied to the root element.\n   */\n  rootProps: PropTypes.object,\n\n  /**\n   * CSS class name applied to the root element of the slider.\n   */\n  className: PropTypes.string,\n\n  /**\n   * Two element array of numbers providing the min and max values for the slider [min, max] e.g. [0, 100].\n   * It does not matter if the slider is reversed on the screen, domain is always [min, max] with min < max.\n   */\n  domain: PropTypes.array,\n\n  /**\n   * An array of numbers. You can supply one for a value slider, two for a range slider or more to create n-handled sliders.\n   * The values should correspond to valid step values in the domain.\n   * The numbers will be forced into the domain if they are two small or large.\n   */\n  values: PropTypes.array,\n\n  /**\n   * The step value for the slider.\n   */\n  step: PropTypes.number,\n\n  /**\n   * The interaction mode. Value of 1 will allow handles to cross each other.\n   * Value of 2 will keep the sliders from crossing and separated by a step.\n   * Value of 3 will make the handles pushable and keep them a step apart.\n   * ADVANCED: You can also supply a function that will be passed the current values and the incoming update.\n   * Your function should return what the state should be set as.\n   */\n  mode: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),\n\n  /**\n   * Set to true if the slider is displayed vertically to tell the slider to use the height to calculate positions.\n   */\n  vertical: PropTypes.bool,\n\n  /**\n   * Reverse the display of slider values.\n   */\n  reversed: PropTypes.bool,\n\n  /**\n   * Function triggered when the value of the slider has changed. This will recieve changes at the end of a slide as well as changes from clicks on rails and tracks. Receives values.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Function called with the values at each update (caution: high-volume updates when dragging). Receives values.\n   */\n  onUpdate: PropTypes.func,\n\n  /**\n   * Function triggered with ontouchstart or onmousedown on a handle. Receives values.\n   */\n  onSlideStart: PropTypes.func,\n\n  /**\n   * Function triggered on ontouchend or onmouseup on a handle. Receives values.\n   */\n  onSlideEnd: PropTypes.func,\n\n  /**\n   * Ignore all mouse, touch and keyboard events.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Render slider children as siblings. This is primarily for SVG sliders. See the SVG example.\n   */\n  flatten: PropTypes.bool,\n\n  /**\n   * When true, the slider will warn if values are changed to fit domain and step values.  Defaults to false.\n   */\n  warnOnChanges: PropTypes.bool,\n\n  /**\n   * Component children to render.\n   */\n  children: PropTypes.any\n} : {};\nSlider.defaultProps = {\n  mode: 1,\n  step: 0.1,\n  domain: [0, 100],\n  component: 'div',\n  rootProps: {},\n  rootStyle: {},\n  vertical: false,\n  reversed: false,\n  onChange: noop,\n  onUpdate: noop,\n  onSlideStart: noop,\n  onSlideEnd: noop,\n  disabled: false,\n  flatten: false,\n  warnOnChanges: false\n};\nexport default Slider;","map":null,"metadata":{},"sourceType":"module"}