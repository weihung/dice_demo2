{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport { invariantIntlContext } from '../utils';\nimport { Context } from './injectIntl';\nvar DisplayName;\n\n(function (DisplayName) {\n  DisplayName[\"formatDate\"] = \"FormattedDate\";\n  DisplayName[\"formatTime\"] = \"FormattedTime\";\n  DisplayName[\"formatNumber\"] = \"FormattedNumber\";\n  DisplayName[\"formatList\"] = \"FormattedList\";\n})(DisplayName || (DisplayName = {}));\n\nvar DisplayNameParts;\n\n(function (DisplayNameParts) {\n  DisplayNameParts[\"formatDate\"] = \"FormattedDateParts\";\n  DisplayNameParts[\"formatTime\"] = \"FormattedTimeParts\";\n  DisplayNameParts[\"formatNumber\"] = \"FormattedNumberParts\";\n  DisplayNameParts[\"formatList\"] = \"FormattedListParts\";\n})(DisplayNameParts || (DisplayNameParts = {}));\n\nexport const FormattedNumberParts = props => React.createElement(Context.Consumer, null, intl => {\n  invariantIntlContext(intl);\n\n  const value = props.value,\n        children = props.children,\n        formatProps = __rest(props, [\"value\", \"children\"]);\n\n  return children(intl.formatNumberToParts(value, formatProps));\n});\nFormattedNumberParts.displayName = 'FormattedNumberParts';\nexport function createFormattedDateTimePartsComponent(name) {\n  const ComponentParts = props => React.createElement(Context.Consumer, null, intl => {\n    invariantIntlContext(intl);\n\n    const value = props.value,\n          children = props.children,\n          formatProps = __rest(props, [\"value\", \"children\"]);\n\n    const date = typeof value === 'string' ? new Date(value || 0) : value;\n    const formattedParts = name === 'formatDate' ? intl.formatDateToParts(date, formatProps) : intl.formatTimeToParts(date, formatProps);\n    return children(formattedParts);\n  });\n\n  ComponentParts.displayName = DisplayNameParts[name];\n  return ComponentParts;\n}\nexport function createFormattedComponent(name) {\n  const Component = props => React.createElement(Context.Consumer, null, intl => {\n    invariantIntlContext(intl);\n\n    const value = props.value,\n          children = props.children,\n          formatProps = __rest(props, [\"value\", \"children\"]); // TODO: fix TS type definition for localeMatcher upstream\n\n\n    const formattedValue = intl[name](value, formatProps);\n\n    if (typeof children === 'function') {\n      return children(formattedValue);\n    }\n\n    const Text = intl.textComponent || React.Fragment;\n    return React.createElement(Text, null, formattedValue);\n  });\n\n  Component.displayName = DisplayName[name];\n  return Component;\n}","map":null,"metadata":{},"sourceType":"module"}