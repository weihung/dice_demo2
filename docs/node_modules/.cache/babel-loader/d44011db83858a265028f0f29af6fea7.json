{"ast":null,"code":"import { filterProps, createError } from '../utils';\nconst LIST_FORMAT_OPTIONS = ['localeMatcher', 'type', 'style'];\nconst now = Date.now();\n\nfunction generateToken(i) {\n  return \"\".concat(now, \"_\").concat(i, \"_\").concat(now);\n}\n\nexport function formatList({\n  locale,\n  onError\n}, getListFormat, values, options = {}) {\n  const ListFormat = Intl.ListFormat;\n\n  if (!ListFormat) {\n    onError(createError(\"Intl.ListFormat is not available in this environment.\\nTry polyfilling it using \\\"@formatjs/intl-listformat\\\"\\n\"));\n  }\n\n  let filteredOptions = filterProps(options, LIST_FORMAT_OPTIONS);\n\n  try {\n    const richValues = {};\n    const serializedValues = values.map((v, i) => {\n      if (typeof v === 'object') {\n        const id = generateToken(i);\n        richValues[id] = v;\n        return id;\n      }\n\n      return String(v);\n    });\n\n    if (!Object.keys(richValues).length) {\n      return getListFormat(locale, filteredOptions).format(serializedValues);\n    }\n\n    const parts = getListFormat(locale, filteredOptions).formatToParts(serializedValues);\n    return parts.reduce((all, el) => {\n      const val = el.value;\n\n      if (richValues[val]) {\n        all.push(richValues[val]);\n      } else if (typeof all[all.length - 1] === 'string') {\n        all[all.length - 1] += val;\n      } else {\n        all.push(val);\n      }\n\n      return all;\n    }, []);\n  } catch (e) {\n    onError(createError('Error formatting list.', e));\n  }\n\n  return values;\n}","map":null,"metadata":{},"sourceType":"module"}