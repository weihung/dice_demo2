{"ast":null,"code":"/* eslint complexity: \"off\", max-statements: \"off\", max-depth: \"off\" */\nimport { getUpdatedHandles } from './utils'; // default mode\n\nexport function mode1(curr, next) {\n  return next;\n} // prevent duplicate values and crossing\n\nexport function mode2(curr, next) {\n  for (var i = 0; i < curr.length; i++) {\n    if (curr[i].key !== next[i].key) {\n      return curr;\n    }\n\n    if (next[i + 1] && next[i].val === next[i + 1].val) {\n      return curr;\n    }\n  }\n\n  return next;\n} // pushable mode\n\nexport function mode3(curr, next, step, reversed, getValue) {\n  var indexForMovingHandle = -1;\n  var handleMoveIsPositive = true;\n\n  for (var i = 0; i < curr.length; i++) {\n    var c = curr[i];\n    var n = next[i]; // make sure keys are in same order if not return curr\n\n    if (!n || n.key !== c.key) {\n      return curr;\n    } else if (n.val !== c.val) {\n      indexForMovingHandle = i;\n      handleMoveIsPositive = n.val - c.val > 0;\n    }\n  } // nothing has changed (shouldn't happen but just in case).\n\n\n  if (indexForMovingHandle === -1) {\n    return curr;\n  } else {\n    var increment = handleMoveIsPositive ? step : -step;\n\n    for (var _i = 0; _i < next.length; _i++) {\n      var n0 = next[_i];\n      var n1 = next[_i + 1];\n\n      if (n1 && n0.val === n1.val) {\n        if (_i === indexForMovingHandle) {\n          var newStep = n1.val + increment;\n\n          if (getValue(newStep) === newStep) {\n            var clone = getUpdatedHandles(next, n1.key, n1.val + increment, reversed);\n            var check = mode3(next, clone, step, reversed, getValue);\n\n            if (check === next) {\n              return curr;\n            } else {\n              return check;\n            }\n          } else {\n            return curr;\n          }\n        } else {\n          var _newStep = n0.val + increment;\n\n          if (getValue(_newStep) === _newStep) {\n            var _clone = getUpdatedHandles(next, n0.key, n0.val + increment, reversed);\n\n            var _check = mode3(next, _clone, step, reversed, getValue);\n\n            if (_check === next) {\n              return curr;\n            } else {\n              return _check;\n            }\n          } else {\n            return curr;\n          }\n        }\n      }\n    }\n  }\n\n  return next;\n}","map":null,"metadata":{},"sourceType":"module"}