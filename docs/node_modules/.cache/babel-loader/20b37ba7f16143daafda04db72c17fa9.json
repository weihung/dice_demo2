{"ast":null,"code":"var _jsxFileName = \"/Users/weihung/Documents/workspace/dice/frontend/dice-demo/src/two_dice/component/RenderDice.js\";\nimport React, { Component } from 'react';\nconst DefaultStyle = {\n  width: '50',\n  height: '50',\n  textColor: 'white',\n  textSelectedColor: 'orange'\n};\nexport default class RenderDice extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = () => {\n      this.props.onClick(this.props.value);\n    };\n\n    this.style = props.style ? props.style : DefaultStyle;\n  }\n\n  componentDidUpdate() {\n    this.updateCanvas();\n  }\n\n  componentDidMount() {\n    this.updateCanvas();\n  }\n\n  updateCanvas() {\n    const ctx = this.refs.canvas.getContext('2d');\n    const fontSize = 36; // ctx.clearRect(0, 0, this.refs.canvas.width, this.refs.canvas.height);\n\n    ctx.clearRect((this.refs.canvas.width - fontSize) / 2, (this.refs.canvas.height - fontSize) / 2, (this.refs.canvas.width + fontSize) / 2 + 24, (this.refs.canvas.height + fontSize) / 2);\n    ctx.fillStyle = this.props.selected ? this.style.textSelectedColor : this.style.textColor;\n    ctx.font = fontSize + 'px serif';\n    ctx.fillText(this.props.value, this.refs.canvas.width / 2 - fontSize * (parseInt(this.props.value / 10) + 1) / 5, this.refs.canvas.height / 2 + fontSize / 3);\n  }\n\n  render() {\n    return React.createElement(\"canvas\", {\n      ref: \"canvas\",\n      width: this.style.width,\n      height: this.style.height,\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/weihung/Documents/workspace/dice/frontend/dice-demo/src/two_dice/component/RenderDice.js"],"names":["React","Component","DefaultStyle","width","height","textColor","textSelectedColor","RenderDice","constructor","props","handleClick","onClick","value","style","componentDidUpdate","updateCanvas","componentDidMount","ctx","refs","canvas","getContext","fontSize","clearRect","fillStyle","selected","font","fillText","parseInt","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,IADY;AAEnBC,EAAAA,MAAM,EAAE,IAFW;AAGnBC,EAAAA,SAAS,EAAE,OAHQ;AAInBC,EAAAA,iBAAiB,EAAE;AAJA,CAArB;AAOA,eAAe,MAAMC,UAAN,SAAyBN,SAAzB,CAAmC;AAEhDO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAuBnBC,WAvBmB,GAuBL,MAAM;AAClB,WAAKD,KAAL,CAAWE,OAAX,CAAmB,KAAKF,KAAL,CAAWG,KAA9B;AACD,KAzBkB;;AAEjB,SAAKC,KAAL,GAAaJ,KAAK,CAACI,KAAN,GAAaJ,KAAK,CAACI,KAAnB,GAA0BX,YAAvC;AACD;;AAEDY,EAAAA,kBAAkB,GAAG;AACnB,SAAKC,YAAL;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKD,YAAL;AACD;;AAEDA,EAAAA,YAAY,GAAG;AACb,UAAME,GAAG,GAAG,KAAKC,IAAL,CAAUC,MAAV,CAAiBC,UAAjB,CAA4B,IAA5B,CAAZ;AACA,UAAMC,QAAQ,GAAG,EAAjB,CAFa,CAGb;;AACAJ,IAAAA,GAAG,CAACK,SAAJ,CAAc,CAAC,KAAKJ,IAAL,CAAUC,MAAV,CAAiBhB,KAAjB,GAAyBkB,QAA1B,IAAsC,CAApD,EAAuD,CAAC,KAAKH,IAAL,CAAUC,MAAV,CAAiBf,MAAjB,GAA0BiB,QAA3B,IAAuC,CAA9F,EAAiG,CAAC,KAAKH,IAAL,CAAUC,MAAV,CAAiBhB,KAAjB,GAAyBkB,QAA1B,IAAsC,CAAtC,GAA0C,EAA3I,EAA+I,CAAC,KAAKH,IAAL,CAAUC,MAAV,CAAiBf,MAAjB,GAA0BiB,QAA3B,IAAuC,CAAtL;AACAJ,IAAAA,GAAG,CAACM,SAAJ,GAAgB,KAAKd,KAAL,CAAWe,QAAX,GAAqB,KAAKX,KAAL,CAAWP,iBAAhC,GAAoD,KAAKO,KAAL,CAAWR,SAA/E;AACAY,IAAAA,GAAG,CAACQ,IAAJ,GAAWJ,QAAQ,GAAG,UAAtB;AACAJ,IAAAA,GAAG,CAACS,QAAJ,CAAa,KAAKjB,KAAL,CAAWG,KAAxB,EAA+B,KAAKM,IAAL,CAAUC,MAAV,CAAiBhB,KAAjB,GAAyB,CAAzB,GAA6BkB,QAAQ,IAAIM,QAAQ,CAAC,KAAKlB,KAAL,CAAWG,KAAX,GAAmB,EAApB,CAAR,GAAkC,CAAtC,CAAR,GAAmD,CAA/G,EAAkH,KAAKM,IAAL,CAAUC,MAAV,CAAiBf,MAAjB,GAA0B,CAA1B,GAA8BiB,QAAQ,GAAG,CAA3J;AACD;;AAMDO,EAAAA,MAAM,GAAG;AACP,WACE;AAAQ,MAAA,GAAG,EAAC,QAAZ;AAAqB,MAAA,KAAK,EAAE,KAAKf,KAAL,CAAWV,KAAvC;AAA8C,MAAA,MAAM,EAAE,KAAKU,KAAL,CAAWT,MAAjE;AAAyE,MAAA,OAAO,EAAE,KAAKM,WAAvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD;;AAjC+C","sourcesContent":["import React, { Component } from 'react';\n\nconst DefaultStyle = {\n  width: '50',\n  height: '50',\n  textColor: 'white',\n  textSelectedColor: 'orange',\n}\n\nexport default class RenderDice extends Component {\n\n  constructor(props) {\n    super(props)\n    this.style = props.style? props.style: DefaultStyle\n  }\n\n  componentDidUpdate() {\n    this.updateCanvas();\n  }\n\n  componentDidMount() {\n    this.updateCanvas();\n  }\n\n  updateCanvas() {\n    const ctx = this.refs.canvas.getContext('2d')\n    const fontSize = 36;\n    // ctx.clearRect(0, 0, this.refs.canvas.width, this.refs.canvas.height);\n    ctx.clearRect((this.refs.canvas.width - fontSize) / 2, (this.refs.canvas.height - fontSize) / 2, (this.refs.canvas.width + fontSize) / 2 + 24, (this.refs.canvas.height + fontSize) / 2);\n    ctx.fillStyle = this.props.selected? this.style.textSelectedColor : this.style.textColor;\n    ctx.font = fontSize + 'px serif';\n    ctx.fillText(this.props.value, this.refs.canvas.width / 2 - fontSize * (parseInt(this.props.value / 10) + 1) / 5, this.refs.canvas.height / 2 + fontSize / 3 );\n  }\n\n  handleClick = () => {\n    this.props.onClick(this.props.value);\n  }\n\n  render() {\n    return (\n      <canvas ref=\"canvas\" width={this.style.width} height={this.style.height} onClick={this.handleClick}/>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}