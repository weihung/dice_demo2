{"ast":null,"code":"import { getNamedFormat, filterProps, createError } from '../utils';\nconst NUMBER_FORMAT_OPTIONS = ['localeMatcher', 'style', 'currency', 'currencyDisplay', 'unit', 'unitDisplay', 'useGrouping', 'minimumIntegerDigits', 'minimumFractionDigits', 'maximumFractionDigits', 'minimumSignificantDigits', 'maximumSignificantDigits', // Unified NumberFormat (Stage 3 as of 10/22/19)\n'compactDisplay', 'currencyDisplay', 'currencySign', 'notation', 'signDisplay', 'unit', 'unitDisplay'];\nexport function getFormatter({\n  locale,\n  formats,\n  onError\n}, getNumberFormat, options = {}) {\n  const format = options.format;\n  let defaults = format && getNamedFormat(formats, 'number', format, onError) || {};\n  const filteredOptions = filterProps(options, NUMBER_FORMAT_OPTIONS, defaults);\n  return getNumberFormat(locale, filteredOptions);\n}\nexport function formatNumber(config, getNumberFormat, value, options = {}) {\n  try {\n    return getFormatter(config, getNumberFormat, options).format(value);\n  } catch (e) {\n    config.onError(createError('Error formatting number.', e));\n  }\n\n  return String(value);\n}\nexport function formatNumberToParts(config, getNumberFormat, value, options = {}) {\n  try {\n    return getFormatter(config, getNumberFormat, options).formatToParts(value);\n  } catch (e) {\n    config.onError(createError('Error formatting number.', e));\n  }\n\n  return [];\n}","map":null,"metadata":{},"sourceType":"module"}